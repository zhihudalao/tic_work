# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from motorcontrol/control.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class control(genpy.Message):
  _md5sum = "0a3c197fee892e9fbcd64412aa831ddd"
  _type = "motorcontrol/control"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 header1
uint8 header2
uint8 hostid
uint8 subhostid
int32 leftmotorspeed
int32 rightmotorspeed
uint32 encodeclear
uint32 suckwindmotorenable
uint32 suckwindpwmlevel
uint32 suckwatermotorenable
uint32 suckwaterpwmenable
uint32 brushplatepushenable
uint32 brushplatepushtime
uint32 suckwaterpushenbale
uint32 suckwaterpushtime
uint32 spraywaterelectvalveenbale
uint32 spraywaterelectvalvelevel
uint32 turnonwaterelectvalveenbale
uint32 turnonwaterelectvalvelevel
uint32 stirringmotorenable
uint32 stirringmotorpwmenable
uint32 brushplateenable
uint32 brushplatepwdlevel
uint8 checknumhigh
uint8 checknumlow
"""
  __slots__ = ['header1','header2','hostid','subhostid','leftmotorspeed','rightmotorspeed','encodeclear','suckwindmotorenable','suckwindpwmlevel','suckwatermotorenable','suckwaterpwmenable','brushplatepushenable','brushplatepushtime','suckwaterpushenbale','suckwaterpushtime','spraywaterelectvalveenbale','spraywaterelectvalvelevel','turnonwaterelectvalveenbale','turnonwaterelectvalvelevel','stirringmotorenable','stirringmotorpwmenable','brushplateenable','brushplatepwdlevel','checknumhigh','checknumlow']
  _slot_types = ['uint8','uint8','uint8','uint8','int32','int32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header1,header2,hostid,subhostid,leftmotorspeed,rightmotorspeed,encodeclear,suckwindmotorenable,suckwindpwmlevel,suckwatermotorenable,suckwaterpwmenable,brushplatepushenable,brushplatepushtime,suckwaterpushenbale,suckwaterpushtime,spraywaterelectvalveenbale,spraywaterelectvalvelevel,turnonwaterelectvalveenbale,turnonwaterelectvalvelevel,stirringmotorenable,stirringmotorpwmenable,brushplateenable,brushplatepwdlevel,checknumhigh,checknumlow

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(control, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header1 is None:
        self.header1 = 0
      if self.header2 is None:
        self.header2 = 0
      if self.hostid is None:
        self.hostid = 0
      if self.subhostid is None:
        self.subhostid = 0
      if self.leftmotorspeed is None:
        self.leftmotorspeed = 0
      if self.rightmotorspeed is None:
        self.rightmotorspeed = 0
      if self.encodeclear is None:
        self.encodeclear = 0
      if self.suckwindmotorenable is None:
        self.suckwindmotorenable = 0
      if self.suckwindpwmlevel is None:
        self.suckwindpwmlevel = 0
      if self.suckwatermotorenable is None:
        self.suckwatermotorenable = 0
      if self.suckwaterpwmenable is None:
        self.suckwaterpwmenable = 0
      if self.brushplatepushenable is None:
        self.brushplatepushenable = 0
      if self.brushplatepushtime is None:
        self.brushplatepushtime = 0
      if self.suckwaterpushenbale is None:
        self.suckwaterpushenbale = 0
      if self.suckwaterpushtime is None:
        self.suckwaterpushtime = 0
      if self.spraywaterelectvalveenbale is None:
        self.spraywaterelectvalveenbale = 0
      if self.spraywaterelectvalvelevel is None:
        self.spraywaterelectvalvelevel = 0
      if self.turnonwaterelectvalveenbale is None:
        self.turnonwaterelectvalveenbale = 0
      if self.turnonwaterelectvalvelevel is None:
        self.turnonwaterelectvalvelevel = 0
      if self.stirringmotorenable is None:
        self.stirringmotorenable = 0
      if self.stirringmotorpwmenable is None:
        self.stirringmotorpwmenable = 0
      if self.brushplateenable is None:
        self.brushplateenable = 0
      if self.brushplatepwdlevel is None:
        self.brushplatepwdlevel = 0
      if self.checknumhigh is None:
        self.checknumhigh = 0
      if self.checknumlow is None:
        self.checknumlow = 0
    else:
      self.header1 = 0
      self.header2 = 0
      self.hostid = 0
      self.subhostid = 0
      self.leftmotorspeed = 0
      self.rightmotorspeed = 0
      self.encodeclear = 0
      self.suckwindmotorenable = 0
      self.suckwindpwmlevel = 0
      self.suckwatermotorenable = 0
      self.suckwaterpwmenable = 0
      self.brushplatepushenable = 0
      self.brushplatepushtime = 0
      self.suckwaterpushenbale = 0
      self.suckwaterpushtime = 0
      self.spraywaterelectvalveenbale = 0
      self.spraywaterelectvalvelevel = 0
      self.turnonwaterelectvalveenbale = 0
      self.turnonwaterelectvalvelevel = 0
      self.stirringmotorenable = 0
      self.stirringmotorpwmenable = 0
      self.brushplateenable = 0
      self.brushplatepwdlevel = 0
      self.checknumhigh = 0
      self.checknumlow = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4B2i17I2B().pack(_x.header1, _x.header2, _x.hostid, _x.subhostid, _x.leftmotorspeed, _x.rightmotorspeed, _x.encodeclear, _x.suckwindmotorenable, _x.suckwindpwmlevel, _x.suckwatermotorenable, _x.suckwaterpwmenable, _x.brushplatepushenable, _x.brushplatepushtime, _x.suckwaterpushenbale, _x.suckwaterpushtime, _x.spraywaterelectvalveenbale, _x.spraywaterelectvalvelevel, _x.turnonwaterelectvalveenbale, _x.turnonwaterelectvalvelevel, _x.stirringmotorenable, _x.stirringmotorpwmenable, _x.brushplateenable, _x.brushplatepwdlevel, _x.checknumhigh, _x.checknumlow))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 82
      (_x.header1, _x.header2, _x.hostid, _x.subhostid, _x.leftmotorspeed, _x.rightmotorspeed, _x.encodeclear, _x.suckwindmotorenable, _x.suckwindpwmlevel, _x.suckwatermotorenable, _x.suckwaterpwmenable, _x.brushplatepushenable, _x.brushplatepushtime, _x.suckwaterpushenbale, _x.suckwaterpushtime, _x.spraywaterelectvalveenbale, _x.spraywaterelectvalvelevel, _x.turnonwaterelectvalveenbale, _x.turnonwaterelectvalvelevel, _x.stirringmotorenable, _x.stirringmotorpwmenable, _x.brushplateenable, _x.brushplatepwdlevel, _x.checknumhigh, _x.checknumlow,) = _get_struct_4B2i17I2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4B2i17I2B().pack(_x.header1, _x.header2, _x.hostid, _x.subhostid, _x.leftmotorspeed, _x.rightmotorspeed, _x.encodeclear, _x.suckwindmotorenable, _x.suckwindpwmlevel, _x.suckwatermotorenable, _x.suckwaterpwmenable, _x.brushplatepushenable, _x.brushplatepushtime, _x.suckwaterpushenbale, _x.suckwaterpushtime, _x.spraywaterelectvalveenbale, _x.spraywaterelectvalvelevel, _x.turnonwaterelectvalveenbale, _x.turnonwaterelectvalvelevel, _x.stirringmotorenable, _x.stirringmotorpwmenable, _x.brushplateenable, _x.brushplatepwdlevel, _x.checknumhigh, _x.checknumlow))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 82
      (_x.header1, _x.header2, _x.hostid, _x.subhostid, _x.leftmotorspeed, _x.rightmotorspeed, _x.encodeclear, _x.suckwindmotorenable, _x.suckwindpwmlevel, _x.suckwatermotorenable, _x.suckwaterpwmenable, _x.brushplatepushenable, _x.brushplatepushtime, _x.suckwaterpushenbale, _x.suckwaterpushtime, _x.spraywaterelectvalveenbale, _x.spraywaterelectvalvelevel, _x.turnonwaterelectvalveenbale, _x.turnonwaterelectvalvelevel, _x.stirringmotorenable, _x.stirringmotorpwmenable, _x.brushplateenable, _x.brushplatepwdlevel, _x.checknumhigh, _x.checknumlow,) = _get_struct_4B2i17I2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4B2i17I2B = None
def _get_struct_4B2i17I2B():
    global _struct_4B2i17I2B
    if _struct_4B2i17I2B is None:
        _struct_4B2i17I2B = struct.Struct("<4B2i17I2B")
    return _struct_4B2i17I2B
