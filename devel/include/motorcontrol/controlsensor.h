// Generated by gencpp from file motorcontrol/controlsensor.msg
// DO NOT EDIT!


#ifndef MOTORCONTROL_MESSAGE_CONTROLSENSOR_H
#define MOTORCONTROL_MESSAGE_CONTROLSENSOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motorcontrol
{
template <class ContainerAllocator>
struct controlsensor_
{
  typedef controlsensor_<ContainerAllocator> Type;

  controlsensor_()
    : header1(0)
    , header2(0)
    , hostid(0)
    , subhostid(0)
    , imudata(0)
    , encoderdata(0)
    , wavedata(0)
    , glosscheckdata(0)
    , collisiondata(0)
    , checknumhigh(0)
    , checknumlow(0)  {
    }
  controlsensor_(const ContainerAllocator& _alloc)
    : header1(0)
    , header2(0)
    , hostid(0)
    , subhostid(0)
    , imudata(0)
    , encoderdata(0)
    , wavedata(0)
    , glosscheckdata(0)
    , collisiondata(0)
    , checknumhigh(0)
    , checknumlow(0)  {
  (void)_alloc;
    }



   typedef uint8_t _header1_type;
  _header1_type header1;

   typedef uint8_t _header2_type;
  _header2_type header2;

   typedef uint8_t _hostid_type;
  _hostid_type hostid;

   typedef uint8_t _subhostid_type;
  _subhostid_type subhostid;

   typedef uint32_t _imudata_type;
  _imudata_type imudata;

   typedef uint32_t _encoderdata_type;
  _encoderdata_type encoderdata;

   typedef uint32_t _wavedata_type;
  _wavedata_type wavedata;

   typedef uint32_t _glosscheckdata_type;
  _glosscheckdata_type glosscheckdata;

   typedef uint32_t _collisiondata_type;
  _collisiondata_type collisiondata;

   typedef uint8_t _checknumhigh_type;
  _checknumhigh_type checknumhigh;

   typedef uint8_t _checknumlow_type;
  _checknumlow_type checknumlow;





  typedef boost::shared_ptr< ::motorcontrol::controlsensor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motorcontrol::controlsensor_<ContainerAllocator> const> ConstPtr;

}; // struct controlsensor_

typedef ::motorcontrol::controlsensor_<std::allocator<void> > controlsensor;

typedef boost::shared_ptr< ::motorcontrol::controlsensor > controlsensorPtr;
typedef boost::shared_ptr< ::motorcontrol::controlsensor const> controlsensorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motorcontrol::controlsensor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motorcontrol::controlsensor_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace motorcontrol

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'motorcontrol': ['/home/ubuntu/tic_work/src/motorcontrol/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::motorcontrol::controlsensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motorcontrol::controlsensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motorcontrol::controlsensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motorcontrol::controlsensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motorcontrol::controlsensor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motorcontrol::controlsensor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motorcontrol::controlsensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "33af2745d23f98af3ffb9e2f3e25f776";
  }

  static const char* value(const ::motorcontrol::controlsensor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x33af2745d23f98afULL;
  static const uint64_t static_value2 = 0x3ffb9e2f3e25f776ULL;
};

template<class ContainerAllocator>
struct DataType< ::motorcontrol::controlsensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motorcontrol/controlsensor";
  }

  static const char* value(const ::motorcontrol::controlsensor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motorcontrol::controlsensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 header1\n\
uint8 header2\n\
uint8 hostid\n\
uint8 subhostid\n\
uint32 imudata\n\
uint32 encoderdata \n\
uint32 wavedata\n\
uint32 glosscheckdata\n\
uint32 collisiondata\n\
uint8 checknumhigh\n\
uint8 checknumlow\n\
";
  }

  static const char* value(const ::motorcontrol::controlsensor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motorcontrol::controlsensor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header1);
      stream.next(m.header2);
      stream.next(m.hostid);
      stream.next(m.subhostid);
      stream.next(m.imudata);
      stream.next(m.encoderdata);
      stream.next(m.wavedata);
      stream.next(m.glosscheckdata);
      stream.next(m.collisiondata);
      stream.next(m.checknumhigh);
      stream.next(m.checknumlow);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct controlsensor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motorcontrol::controlsensor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motorcontrol::controlsensor_<ContainerAllocator>& v)
  {
    s << indent << "header1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.header1);
    s << indent << "header2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.header2);
    s << indent << "hostid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hostid);
    s << indent << "subhostid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.subhostid);
    s << indent << "imudata: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.imudata);
    s << indent << "encoderdata: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.encoderdata);
    s << indent << "wavedata: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.wavedata);
    s << indent << "glosscheckdata: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.glosscheckdata);
    s << indent << "collisiondata: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.collisiondata);
    s << indent << "checknumhigh: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.checknumhigh);
    s << indent << "checknumlow: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.checknumlow);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTORCONTROL_MESSAGE_CONTROLSENSOR_H
